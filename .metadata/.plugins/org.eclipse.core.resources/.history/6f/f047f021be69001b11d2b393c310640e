package com.ceking.crowd.controller;

import java.util.concurrent.TimeUnit;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ceking.crowd.api.MySQLRemoteService;
import com.ceking.crowd.api.RedisRemoteService;
import com.ceking.crowd.contant.CrowdConstant;
import com.ceking.crowd.entity.po.MemberPO;
import com.ceking.crowd.entity.vo.MemberVO;
import com.ceking.crowd.util.CrowdUtil;
import com.ceking.crowd.util.ResultEntity;
import com.google.common.base.Objects;
import com.netflix.discovery.converters.Auto;

@Controller
public class MemberController {

	@Autowired
	private RedisRemoteService redisRemoteService;

	@Autowired
	private MySQLRemoteService mysqlRemoteService;
	
	@RequestMapping("/auth/do/member/regist")
	public String regist(MemberVO memberVO,ModelMap modelMap){
		//1.获取手机号，检查验证码
		String phoneNum = memberVO.getPhoneNum();
		String key = CrowdConstant.REDIS_CODE_PREFIX +"_"+ phoneNum;		
		ResultEntity<String> redisResultEntity = redisRemoteService.getRedisStringValueByKeyRemote(key);
		if(ResultEntity.SUCCESS.equals(redisResultEntity.getResult())){
			//判断验证码是否一致
			String code= redisResultEntity.getData();
			if(code!=null){
				if(Objects.equal(code, memberVO.getCode())){
					//验证码有效,删除redis中验证码		
					redisRemoteService.removeRedisKeyRemote(key);			
					//执行加密
					BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
					String userpswd = memberVO.getUserpswd();
					String password = passwordEncoder.encode(userpswd);
					memberVO.setUserpswd(password);
					//执行注册
					//创建对象
					MemberPO memberPO =new MemberPO();
					BeanUtils.copyProperties(memberVO, memberPO);
					//调用远程方法保存对象
					ResultEntity<String> saveResultEntity = mysqlRemoteService.saveMember(memberPO);
					
					
				}else{
					modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_CODE_INVALID);
					return "member-regist";
				}				
			}else{
				modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, CrowdConstant.MESSAGE_CODE_NOT_EXIST);
				return "member-regist";
			}
		}else{
			modelMap.addAttribute(CrowdConstant.ATTR_NAME_MESSAGE, redisResultEntity.getMessage());
			return "member-regist";
		}
		return "member-login";
	}
	
	
	/**
	 * 发送验证码
	 * @param phoneNum
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/auth/member/send/message")
	public ResultEntity<String> sendMessage(@RequestParam("phoneNum") String phoneNum) {	
		
		String sign = "【优益小C】";		
		ResultEntity<String> resultEntity = CrowdUtil.sendCodeMessage(phoneNum, 4, sign);
		if (ResultEntity.SUCCESS.equals(resultEntity.getResult())) {
			// 将验证码存入redis
			String key = CrowdConstant.REDIS_CODE_PREFIX +"_"+ phoneNum;
			String code = resultEntity.getData();
			long time = 15;
			TimeUnit timeUnit = TimeUnit.MINUTES;
			ResultEntity<String> saveCodeResult = redisRemoteService.setRedisKeyValueRemoteWithTimeOut(key, code, time,
					timeUnit);
			if (ResultEntity.SUCCESS.equals(saveCodeResult.getResult())) {
				return ResultEntity.successWithoutData();
			} else {
				return saveCodeResult;
			}
		} else {
			return resultEntity;
		}

	}
}
