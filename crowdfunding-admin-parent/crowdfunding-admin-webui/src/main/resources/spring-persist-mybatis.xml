<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 加载外部文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="driverClassName" value="${jdbc.driver}"></property>
	</bean>

	<!-- 配置SqlSessionFactoryBean整合MyBatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
		<!-- Mapper.xml文件位置 -->
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
		<!-- 装配数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置插件-->
		<property name="plugins">
			<array>
				<!-- 配置 PageHelper 插件-->
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<props>
							<!-- 配置数据库，类型 -->
							<prop key="dialect">mysql</prop>
							<!-- 配置页码的合理化修正 ,在1-总页码之间修正页码-->
							<prop key="reasonable">true</prop>
						</props>
					</property>
				</bean>
			</array>
		</property>
		
	</bean>
	<!-- 配置MapperScannerConfigure 来扫描Mapper接口所在的包 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ceking.crowd.mapper"></property>
	</bean>
	
	
	<!-- 事务配置文件 -->
	<!-- 配置自动扫描的包，主要是为了把Service扫描到IOC容器中 -->
	<context:component-scan base-package="com.ceking.crowd.service"></context:component-scan>
	<!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 装配数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置事务切面 -->
	<aop:config>
		<!-- 切入点配置，后期整合SpringSecurity,避免把UserDetailsService加入事务控制，切入点表达式定位到ServiceImpl -->
		<aop:pointcut expression="execution(* *..*ServiceImpl.*(..))" id="txPoint"/>
		<!-- 将切入点表达式和事务通知关联起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager" >
		<!-- 配置事务属性 -->
		<tx:attributes>
			<!-- 查询方法，配置只读属性 -->
			<tx:method name="get**" read-only="true"/>
			<tx:method name="find**" read-only="true"/>
			<tx:method name="query**" read-only="true"/>
			<tx:method name="count**" read-only="true"/>
			<!-- 增删改方法，配置事务传播行为，回滚异常 -->
			<!-- 
				propagation：
					"REQUIRED" ：当前方法必须工作在事务 中，如果当前线程上没有开启的事务，就开启新的事务，如果已经有了就使用事务
					"REQUIRES_NEW":建议使用的值，不管当前线程上有没有事务，都开启新的事务，在自己的事务中进行，不会受到其他事务回滚的影响
				rollback-for: 配置事务方法针对什么异常进行回滚
					默认：运行时异常回滚
					建议：编译时异常和运行时异常回滚					
			 -->
			<tx:method name="save**" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
			<tx:method name="update**" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
			<tx:method name="remove**" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
			<tx:method name="batch**" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
			
		</tx:attributes>
	</tx:advice>
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
</beans>
